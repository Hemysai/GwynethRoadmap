## In this step we generate a AI response by invoking a aws bedrock model 
---

Needs a S3 event log pre configured

## Lambda Code
import boto3
import json
import uuid
import re
from botocore.exceptions import ClientError

def clean_filename(input_string):
    """Clean up the input string to be a valid S3 key (no special characters or spaces)."""
    # Replace non-alphanumeric characters with underscores, and limit the length
    return re.sub(r'[^a-zA-Z0-9_-]', '_', input_string)[:200]

def lambda_handler(event, context):
    # Initialize the Bedrock Runtime and S3 client
    bedrock_client = boto3.client("bedrock-runtime", region_name="us-east-1")
    s3_client = boto3.client("s3")
    model_id = "amazon.titan-text-premier-v1:0"
    input_bucket = " " # bucket name
    try:
        response = s3_client.list_objects_v2(Bucket=input_bucket)
        if 'Contents' not in response:
            return {
                "statusCode": 400,
                "body": json.dumps({"error": "No objects found in the madebyai bucket."})
            }
        latest_object = max(response['Contents'], key=lambda x: x['LastModified'])
        latest_object_key = latest_object['Key']
        obj = s3_client.get_object(Bucket=input_bucket, Key=latest_object_key)
        raw_message = obj['Body'].read().decode('utf-8')  # Assuming the object contains a text message
        file_name = clean_filename(raw_message) + ".txt"
        user_message = f"""
        Create a structured markdown template based on the following phase title: '{raw_message}'.
        Follow this structure:
        
        Phase Title: {raw_message}
        Short Description: Provide a brief summary of the phase title.
        Cloud Relevance: Explain how the phase applies to cloud professionals.
        Topics:
        1. Key topic 1
        2. Key topic 2
        3. Key topic 3
        Resources:
        - Resource 1: Title of the resource
        - Resource 2: Title of the resource
        - Resource 3: Title of the resource
        """ 
        conversation = [
            {
                "role": "user",
                "content": [{"text": user_message}],
            }
        ]
        
        try:
            response = bedrock_client.converse(
                modelId=model_id,
                messages=conversation,
            )
            response_text = response["output"]["message"]["content"][0]["text"]
            
            output_bucket = " " #output bucket
            
            s3_client.put_object(
                Bucket=output_bucket,  # The output bucket for saving responses
                Key=file_name,
                Body=response_text,
                ContentType="text/plain"
            )
            
            s3_url = f"s3://{output_bucket}/{file_name}"
            return {
                "statusCode": 200,
                "body": json.dumps({"message": "Response uploaded to S3", "s3_url": s3_url})
            }
        
        except ClientError as e:
            return {
                "statusCode": 500,
                "body": json.dumps({"error": f"AI response generation failed: {str(e)}"})
            }
        
    except ClientError as e:
        return {
            "statusCode": 500,
            "body": json.dumps({"error": f"AWS ClientError: {str(e)}"})
        }
    except Exception as e:
        return {
            "statusCode": 500,
            "body": json.dumps({"error": f"Unexpected error: {str(e)}"})
        }

